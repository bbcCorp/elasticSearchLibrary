@model Nest.ISearchResponse<elasticSearchLibrary.Core.Book>

@{
    ViewBag.Title = "Search Result";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    <div name="basic_search_div" class="col-lg-12">

        <div class="row">
            <div class="col-md-6">
                <h3>Search Results for <i> @ViewBag.Query </i> </h3>
            </div>
            <div class="col-md-6 input-group" style="width:400px;text-align:center;margin:0 auto;">

                <input class="form-control input-lg" title="Enter a search keyword" placeholder="Search keyword" type="text" name="q" value="@ViewBag.Query">

                <span class="input-group-btn">
                    <button class="btn btn-lg btn-danger" type="submit"><i class="fa fa-search"></i></button>
                </span>
            </div>

        </div>

    </div>
}



@if (ViewBag.Query != null)
{
    <hr />
    <div>
        <div class="row">
            <div class="col-md-6">
                <span> Showing <b>@Model.Hits.Count()</b>  out of <b>@Model.Total</b>   results </span>
            </div>
            <div class="col-md-6"> Time taken: @Model.ElapsedMilliseconds milliseconds </div>
        </div>
        <br />
        <br />
        @Html.Partial("BookList", Model.Documents.ToList<elasticSearchLibrary.Core.Book>())
    </div>

    @section RefinementPanel
{
        @if (Model.Aggregations.Count > 0)
        {
            <ul class="nav" id="main-menu">

                @foreach (var filters in Model.Aggregations)
                {
                    <li>
                        <a href="#"><i class="fa fa-caret-square-o-down"></i> @filters.Key<span class="fa arrow"></span></a>
                        <ul class="nav nav-second-level">
                            @foreach (var item in ((Nest.Bucket)(filters.Value)).Items)
                            {
                                var refinement = (Nest.KeyItem)(item);
                                string refinementText = refinement.Key + " [" + refinement.DocCount + "] ";
                                string filterText = filters.Key + ":" + refinement.Key;

                                <li>
                                    @Html.ActionLink(refinementText, "Result", new { q = @ViewBag.Query, filter = @filterText });
                                </li>
                            }
                        </ul>
                    </li>
                }

                <li>
                    @Html.ActionLink("All Results", "Result", new { q = @ViewBag.Query }, new { @class = "fa fa-check-square-o" });
                </li>

            </ul>
        }


    }
}
